package adsa2p1;import java.io.*;/** * @author Elizur */public class GreedyAlgorithm {    private CoursesGraph coursesGraph;    public GreedyAlgorithm(CoursesGraph coursesGraph) throws IOException {        this.coursesGraph = coursesGraph;        this.Greedy(coursesGraph.getCourses(), coursesGraph.getAdj());    }    public void Greedy(Course[] courses, int[][] adj) throws IOException {        try {            int maxRoomNo = 1;            int[] roomAssignment = new int[adj.length];            assignRoom(adj, 0, maxRoomNo, roomAssignment);            this.saveOutput(coursesGraph.getFilename(), courses, roomAssignment);        } catch (IOException e) {            e.printStackTrace();        }    }    private void assignRoom(int[][] adj, int currentCourse, int maxRoomNo, int[] roomAssignment) {        boolean sufficientRooms = false;        if (currentCourse < adj.length) {            for (int currentRoomNo = 1; currentRoomNo <= maxRoomNo; currentRoomNo++) {                if (checkConfilction(adj, currentCourse, currentRoomNo, roomAssignment)) {                    sufficientRooms = true;                    if (roomAssignment[currentCourse] == 0) {                        roomAssignment[currentCourse] = currentRoomNo;                    }                    assignRoom(adj, currentCourse + 1, maxRoomNo, roomAssignment);                }            }            if (!sufficientRooms) {                maxRoomNo++;                if (roomAssignment[currentCourse] == 0) {                    roomAssignment[currentCourse] = maxRoomNo;                }                assignRoom(adj, currentCourse + 1, maxRoomNo, roomAssignment);            }        }    }    private boolean checkConfilction(int[][] adj, int currentCourse, int currentRoomNo, int[] roomAssignment) {        for (int j = 0; j < currentCourse; j++) {            if (adj[currentCourse][j] == 1 && roomAssignment[j] == currentRoomNo) {                return false;            }        }        return true;    }    private void saveOutput(String filename, Course[] courses, int[] roomAssignment) throws IOException {        try {            int max = 0;            for (int roomNo : roomAssignment) {                if (roomNo > max) {                    max = roomNo;                }            }            FileWriter output = new FileWriter(filename + ".out");            String ls = System.getProperty("line.separator");            output.write(String.valueOf(max) + ls);            for (int i = 0; i < courses.length; i++) {                output.write(courses[i].getCourseName() + " " + String.valueOf(roomAssignment[i]) + ls);            }            output.close();        } catch (IOException e) {            e.printStackTrace();        }    }}